/* Generated by AN DISI Unibo */ 
package it.unibo.wastetruckactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wastetruckactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "idle"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Mat = ""
				var Qua = ""	
		return { //this:ActionBasciFsm
				state("idle") { //this:State
					action { //it:State
						println("$name	|	started")
						
									Mat = if (kotlin.random.Random.nextFloat() > 0.5) "glass" else "plastic" 
									Qua = kotlin.random.Random.nextInt(100, 200).toString()
						request("storeWaste", "storeWaste($Mat,$Qua)" ,"wasteserviceactor" )  
					}
					 transition(edgeName="t01",targetState="unloadwaste",cond=whenReply("loadaccept"))
					transition(edgeName="t02",targetState="goaway",cond=whenReply("loadrejected"))
				}	 
				state("unloadwaste") { //this:State
					action { //it:State
						println("$name	|	Request accepted")
					}
				}	 
				state("goaway") { //this:State
					action { //it:State
						println("$name	|	Request rejected")
					}
				}	 
			}
		}
}
