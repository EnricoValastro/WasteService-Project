System transporttrolley 

/* Shout Down Message */
Dispatch exit 		 : exit(_)

/* Deposit Action Message */
Request  pickup      : pickup(_)
Reply  	 pickupdone  : pickupdone(_)
Dispatch dropout     : dropout(MATERIAL) // MATERIAL = PLASTIC | GLASS
Event	 dropoutdone : dropoutdone(_)

/* BackHome Message */
Dispatch gotohome    : gotohome(_)

/* Moving Message */
Request  moveto      : moveto(POS)       // POS = HOME | INDOOR | PLASTICBOX | GLASSBOX
Reply    moveok	     : moveok(_)
Reply    moveko	     : moveko(_)

/* Action Message */
Request  execaction  : execaction(ACT)   // ACT = PICKUP | DROPOUT
Reply    execok      : execok(_)
Reply    execko      : execko(_) 

/* Pathexec Message */
Request  dopath      : dopath(PATH)
Reply    dopathdone  : dopathdone(ARG)
Reply    dopathfail  : dopathfail(ARG)

/* Basicrobot Message */
Dispatch cmd		 : cmd(MOVE)		 // MOVE = w | s | l | r | h

Context ctxwasteservice ip[host="127.0.0.1" port=8055]
Context ctxbasicrobot ip[host="127.0.0.1" port=8020]
Context ctxtransporttrolley ip[host="localhost" port=8056]

ExternalQActor basicrobot context ctxbasicrobot
ExternalQActor pathexec context ctxbasicrobot
ExternalQActor wasteservicecore context ctxwasteservice

/* *********************************************************************************************
 * ---------------------------------------------------------------------------------------------
 * Component addicted to manage request and actions
 * ---------------------------------------------------------------------------------------------
 **********************************************************************************************/


QActor transporttrolleycore context ctxtransporttrolley{
	
	[#
		lateinit var MaterialToStore : String
		lateinit var POS 			 : String
		val tTState = transporttrolley.state.TransportTrolleyState()
		var updateFlag = 0
	#]
	
	State init initial{
		[#utility.Banner.transportTrolleyBanner()#]
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.CYAN)#]
		
		updateResource[#tTState.toJsonString()#]
			
	}Goto idle

	State idle{
		
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.CYAN)#]
		
	}Transition t0 whenRequest pickup -> pickupMove
					whenMsg dropout -> dropoutMove
					whenMsg gotohome -> backHome
					whenMsg exit -> end

	State pickupMove{
		request transporttrolleymover -m moveto : moveto(INDOOR)
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.MOVING)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		
	}Transition t0 whenReply moveok -> pickupExec
					whenReply moveko -> moveErr

	State pickupExec{
		request transporttrolleyexecutor -m execaction : execaction(PICKUP)
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.PICKINGUP)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.INDOOR)
		#]
		updateResource[#tTState.toJsonString()#]
		
	}Transition t0 whenReply execok -> pickupRes
					whenReply execko -> execErr

	State pickupRes{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.IDLE)
		#]
		updateResource[#tTState.toJsonString()#]
		replyTo pickup with pickupdone : pickupdone(_)
	}Goto idle

	State dropoutMove{
		onMsg(dropout : dropout(MATERIAL)){
			[#	
				try{
					MaterialToStore = payloadArg(0).trim().uppercase()
					if(MaterialToStore.equals("PLASTIC")){
						POS = "PLASTICBOX"
					}
					else{
						POS = "GLASSBOX"
					}
				}catch(e : Exception){}	
			#]	
		}
		request transporttrolleymover -m moveto : moveto($POS)
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.MOVING)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		
	}Transition t0 whenReply moveok -> dropoutExec
					whenReply moveko -> moveErr

	State dropoutExec{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.DROPPINGOUT)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.valueOf(POS))
		#]
		updateResource[#tTState.toJsonString()#]
		request transporttrolleyexecutor -m execaction : execaction(DROPOUT)
	}Transition t0 whenReply execok -> dropoutRes
					whenReply execko -> execErr

	State dropoutRes{
		
		emit dropoutdone : dropoutdone

		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.IDLE)
		#]
		
		updateResource[#tTState.toJsonString()#]
		
	}Goto idle

	State backHome{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.MOVING)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.ONTHEROAD)
		#]
		updateResource[#tTState.toJsonString()#]
		request transporttrolleymover -m moveto : moveto(HOME)
	}Transition t0 whenReply moveok -> backHomeRes
					whenReply moveko -> moveErr

	State backHomeRes{
		[#
			tTState.setCurrState(transporttrolley.state.CurrStateTrolley.IDLE)
			tTState.setCurrPosition(transporttrolley.state.TTPosition.HOME)	
		#]
		updateResource[#tTState.toJsonString()#]
	}Goto idle

	State moveErr{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	something went wrong...assistance required.", unibo.comm22.utils.ColorsOut.CYAN)#]
		forward wasteservicecore -m exit : exit(_)
		forward transporttrolleycore -m exit : exit(_) 
	}Goto idle 

	State execErr{
		//Still to be implemented 		
	}

	State end{
		forward transporttrolleyexecutor -m exit : exit(_)
		forward transporttrolleymover -m exit : exit(_)
		terminate 0
	}
}


/* *********************************************************************************************
 * ---------------------------------------------------------------------------------------------
 * Component addicted to move the DDR robot
 * ---------------------------------------------------------------------------------------------
 **********************************************************************************************/


QActor transporttrolleymover context ctxtransporttrolley{
	
	[#
		
		lateinit var destination  : String
		var xDestination : Int = 0
		var yDestination : Int = 0
		var dir : String = "" 
		var PATH = ""
		var PATHSTILLTODO = ""
		var attempt : Int = 0
		var direction : String = ""
		var someToFix : Boolean = false
	#]
	
	State init initial{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.CYAN)#]
		[# unibo.kotlin.planner22Util.initAI() #]
	}Goto idle

	State idle{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.CYAN)#]
		
		[#someToFix = false#]
		
	}Transition t0 whenRequest moveto -> destinationEval
					whenMsg exit -> end

	State destinationEval{
		
		onMsg(moveto : moveto(POS)){
			[#	
				try{
					destination = payloadArg(0).trim().uppercase()
				
					xDestination = utility.ServiceAreaDestinationConfig.getXDestination(destination)
					yDestination = utility.ServiceAreaDestinationConfig.getYDestination(destination)
					dir 		 = utility.ServiceAreaDestinationConfig.getPlannerDirection(destination)
				}catch(e : Exception){}	
			#]	
		}
		
	}Goto plan

	State plan{
		
		[#
			unibo.kotlin.planner22Util.setGoal(xDestination, yDestination)
			unibo.kotlin.planner22Util.doPlan()
			PATH = unibo.kotlin.planner22Util.get_actionSequenceAsString()
			unibo.comm22.utils.ColorsOut.outappl("$name	|	moving to $destination", unibo.comm22.utils.ColorsOut.CYAN)
		#]

	}Goto execMove

	State execMove{
		
		request pathexec -m dopath : dopath($PATH)
		
	}Transition t0 whenReply dopathdone -> lookForFix
					whenReply dopathfail -> moveKo
				
	State lookForFix{
		[# unibo.kotlin.planner22Util.updateAfterPath(PATH) #]
		[# someToFix = false #]
		if[# unibo.kotlin.planner22Util.getDirection() != dir #]{
			[# someToFix = true #]
		}
		
	}Goto fixDir if[# someToFix #]
					else moveOk 
				
	State fixDir{
		[# 
			PATH = utility.DirectionFixer.getPathForFixDir(unibo.kotlin.planner22Util.getDirection(), dir) 
		 	unibo.comm22.utils.ColorsOut.outappl("$name	|	fixing direction", unibo.comm22.utils.ColorsOut.CYAN)
		#]
		
	}Goto execMove
	
	State moveOk{
		
		[# attempt = 0 #]
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	arrived in $destination", unibo.comm22.utils.ColorsOut.CYAN)#]
		
		replyTo moveto with moveok : moveok
		
	}Goto idle

	State moveKo{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	moveKo", unibo.comm22.utils.ColorsOut.CYAN)#]
		[#attempt++#]
		onMsg(dopathfail : dopathfail(ARG)){
			[#	
				try{
					PATHSTILLTODO = payloadArg(0)
				}catch(e : Exception){}	
			#]
		}
		if[#attempt==3#]{
			[# attempt = 0 #]
			replyTo moveto with moveko : moveko(_)
		}
		else{
			request pathexec -m dopath : dopath($PATHSTILLTODO)	
		}
		
	}Transition t0 whenReply dopathdone -> lookForFix
					whenReply dopathfail -> moveKo 
						
	State end{
		terminate 0
	}
}


/* *********************************************************************************************
 * ---------------------------------------------------------------------------------------------
 *Component for performing actions
 * ---------------------------------------------------------------------------------------------
 **********************************************************************************************/


QActor transporttrolleyexecutor context ctxtransporttrolley{
	
	[#
		lateinit var action : String	
	#]
	
	State init initial{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.CYAN)#]
	}Goto idle
	
	State idle{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.CYAN)#]
	}Transition t0 whenRequest execaction -> actionEval
					whenMsg exit -> end
	
	State actionEval{
		onMsg(execaction : execaction(ACT)){
			[#	
				try{
					action = payloadArg(0).trim().uppercase()
				}catch(e : Exception){}	
			#]	
		}
	}Goto execPickup if[#action.equals("PICKUP")#]
						else execDropout
	
	State execPickup{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	$action execution", unibo.comm22.utils.ColorsOut.CYAN)#]
		[#delay(kotlin.random.Random.nextLong(3000, 5000))#]
		replyTo execaction with execok : execok(_)
	}Goto idle
	
	State execDropout{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	$action execution", unibo.comm22.utils.ColorsOut.CYAN)#]
		[#delay(kotlin.random.Random.nextLong(2000, 4000))#]
		replyTo execaction with execok : execok(_)
	}Goto idle
	
	State end{
		terminate 0
	}
}