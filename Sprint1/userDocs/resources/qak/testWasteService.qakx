System testwasteservice

/* Shout Down Message */
Dispatch exit 		 : exit(_)

/* Deposit Action Message */
Request  pickup      : pickup(_)
Reply  	 pickupdone  : pickupdone(_)
Dispatch dropout     : dropout(MATERIAL) // MATERIAL = PLASTIC | GLASS
Event 	 local_dropoutdone : local_dropoutdone(_)

/* BackHome Message */
Dispatch gotohome    : gotohome(_)

/* State update Messages*/
Dispatch updatecontainer  : updatecontainer(MAT,QUA)
Dispatch updatetrolley	  : updatetrolley(POS, STAT)	

/* Deposit Request Messages */
Request  storewaste   : storewaste(MAT, QUA)
Reply 	 loadaccept   : loadaccept(_)
Reply 	 loadrejected : loadrejected(_)

/* Moving Message */
Request  moveto      : moveto(POS)       // POS = HOME | INDOOR | PLASTICBOX | GLASSBOX
Reply    moveok	     : moveok(_)
Reply    moveko	     : moveko(_)

/* Action Message */
Request  execaction  : execaction(ACT)   // ACT = PICKUP | DROPOUT
Reply    execok      : execok(_)
Reply    execko      : execko(_) 

/* Pathexec Message */
Request  dopath      : dopath(PATH)
Reply    dopathdone  : dopathdone(ARG)
Reply    dopathfail  : dopathfail(ARG)


Context ctxwasteservice ip [host="localhost" port=8055]

QActor wasteservice context ctxwasteservice{
	
	[#
		val containerState = wasteservice.state.ContainerState()
		lateinit var REQMATERIAL : wasteservice.state.Material
		var REQWEIGHT : Double = 0.0
		var eval : Boolean = true
	#]
	
	State init initial{
		println("WasteService for Test")
		
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.CYAN)#]
		
	}Goto idle

	State idle{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.CYAN)#]
		
	}Transition t0 whenRequest storewaste -> evalReq
					whenEvent local_dropoutdone -> backHome
					whenMsg   exit -> end

	State evalReq{
	
		onMsg (storewaste : storewaste (MAT, QUA)){
		[#
			try{
				REQMATERIAL = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())
				REQWEIGHT = payloadArg(1).toDouble()	
			}catch(e : Exception){		
			}
			eval = containerState.canStore(REQMATERIAL, REQWEIGHT)
			
		#]

		}
	}Goto acceptRequest if[# eval == true #]
						else rejectRequest
					
	State rejectRequest{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	request rejected", unibo.comm22.utils.ColorsOut.CYAN)#]
		replyTo storewaste with loadrejected : loadrejected(_)
	}Goto idle
	
	State acceptRequest{
		[# 
			unibo.comm22.utils.ColorsOut.outappl("$name	|	request accepted", unibo.comm22.utils.ColorsOut.CYAN)
			containerState.updateBoxWeight(REQMATERIAL, REQWEIGHT)
		#]
		forward systemstatemanager -m updatecontainer : updatecontainer($REQMATERIAL, $REQWEIGHT)
		
	}Goto pickup

	State pickup{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	pickingup...", unibo.comm22.utils.ColorsOut.CYAN)#]
		request transporttrolleycore -m pickup : pickup(_)
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting for pickup done...", unibo.comm22.utils.ColorsOut.CYAN)#]
		
	}Transition t0 whenReply pickupdone  -> dropout 
					
	State dropout{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	droppingout", unibo.comm22.utils.ColorsOut.CYAN)#]
		replyTo storewaste with loadaccept : loadaccept
		forward transporttrolleycore -m dropout : dropout($REQMATERIAL)
	}Goto idle
	
	State backHome{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	sending robot to home", unibo.comm22.utils.ColorsOut.CYAN)#]
		
		forward transporttrolleycore -m gotohome : gotohome(_)
	}Goto idle
	
	State end{
		forward systemstatemanager -m exit : exit(_)
		terminate 0
	}
}

QActor transporttrolleymover context ctxwasteservice{
	
	State init initial{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.BLUE)#]
		[# unibo.kotlin.planner22Util.initAI() #]
	}Goto idle

	State idle{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.BLUE)#]
	
	}
}

QActor transporttrolleycore context ctxwasteservice{
	
	State init initial{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.BLUE)#]
			
	}Goto idle

	State idle{
		
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.BLUE)#]
		
	}Transition t0 whenRequest pickup -> pickupdone
	
	State pickupdone{
		replyTo pickup with pickupdone : pickupdone
	}Goto idle
}

QActor transporttrolleyexecutor context ctxwasteservice{
	
	State init initial{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.BLUE)#]
	}Goto idle
	
	State idle{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.BLUE)#]
	}
}

QActor systemstatemanager context ctxwasteservice{
	
	
	State init initial {
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.MAGENTA)#]
		
	}Goto idle
	
	State idle {
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.MAGENTA)#]
		
	}
	
}

