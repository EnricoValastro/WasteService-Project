/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolleycore

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolleycore ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				lateinit var MaterialToStore : String	
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name	|	setup")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="pickupMove",cond=whenRequest("pickup"))
					transition(edgeName="t01",targetState="dropoutMove",cond=whenDispatch("dropout"))
					transition(edgeName="t02",targetState="backHome",cond=whenDispatch("gotohome"))
				}	 
				state("pickupMove") { //this:State
					action { //it:State
						request("moveto", "moveto(INDOOR)" ,"transporttrolleymover" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="pickupExec",cond=whenReply("moveok"))
				}	 
				state("pickupExec") { //this:State
					action { //it:State
						request("execaction", "execaction(PICKUP)" ,"transporttrolleyexecutor" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="pickupRes",cond=whenReply("execok"))
				}	 
				state("pickupRes") { //this:State
					action { //it:State
						answer("pickup", "pickupdone", "pickupdone(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("dropoutMove") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dropout(MATERIAL)"), Term.createTerm("dropout(MATERIAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													MaterialToStore = payloadArg(0).trim().uppercase() 
															
												}catch(e : Exception){
								
												}	
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("backHome") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
