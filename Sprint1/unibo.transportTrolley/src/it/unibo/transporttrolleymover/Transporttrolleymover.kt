/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolleymover

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolleymover ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				lateinit var destination  : String
				var xDestination : Int = 0
				var yDestination : Int = 0
				var PATH = ""
				var PATHSTILLTODO = ""
				var attempt : Int = 0
				var direction : String = ""
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name	|	starting...")
						 unibo.kotlin.planner22Util.initAI()  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="destinationEval",cond=whenRequest("moveto"))
					transition(edgeName="t015",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("destinationEval") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("moveto(POS)"), Term.createTerm("moveto(POS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													destination = payloadArg(0).trim().uppercase()
												
													xDestination = utility.ServiceAreaConfig.getXDestination(destination)
													yDestination = utility.ServiceAreaConfig.getYDestination(destination)
													
												}catch(e : Exception){}	
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="plan", cond=doswitch() )
				}	 
				state("plan") { //this:State
					action { //it:State
						
									unibo.kotlin.planner22Util.setGoal(xDestination, yDestination)
									unibo.kotlin.planner22Util.doPlan()
									PATH = unibo.kotlin.planner22Util.get_actionSequenceAsString()
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="execMove", cond=doswitch() )
				}	 
				state("execMove") { //this:State
					action { //it:State
						println("$name	|	moving to $destination")
						request("dopath", "dopath($PATH)" ,"pathexec" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t016",targetState="moveOk",cond=whenReply("dopathdone"))
					transition(edgeName="t017",targetState="moveKo",cond=whenReply("dopathfail"))
				}	 
				state("moveOk") { //this:State
					action { //it:State
						 attempt = 0  
						if(  destination == "HOME" && unibo.kotlin.planner22Util.getDirection() == "rightDir"  
						 ){forward("cmd", "cmd(l)" ,"basicrobot" ) 
						PATH = PATH+"l" 
						}
						if(  destination == "INDOOR"  
						 ){ 
										direction = unibo.kotlin.planner22Util.getDirection()
										
						if(  direction == "leftDir" 
						 ){forward("cmd", "cmd(r)" ,"basicrobot" ) 
						PATH = PATH+"r" 
						}
						if(  direction == "rightDir" 
						 ){forward("cmd", "cmd(l)" ,"basicrobot" ) 
						PATH = PATH+"l" 
						}
						}
						println("$name	|	arrived in $destination")
						 
									unibo.kotlin.planner22Util.updateAfterPath(PATH) 
						answer("moveto", "moveok", "moveok(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveKo") { //this:State
					action { //it:State
						println("$name	|	MoveKo")
						attempt++ 
						if( checkMsgContent( Term.createTerm("dopathfail(ARG)"), Term.createTerm("dopathfail(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													PATHSTILLTODO = payloadArg(0)
												}catch(e : Exception){}	
						}
						if( attempt==3 
						 ){ attempt = 0  
						answer("moveto", "moveko", "moveko(_)"   )  
						}
						request("dopath", "dopath($PATHSTILLTODO)" ,"pathexec" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t018",targetState="moveOk",cond=whenReply("dopathdone"))
					transition(edgeName="t019",targetState="moveKo",cond=whenReply("dopathfail"))
				}	 
				state("end") { //this:State
					action { //it:State
						terminate(0)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
