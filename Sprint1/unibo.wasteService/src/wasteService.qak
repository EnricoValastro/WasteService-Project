System wasteservice

//messaggi containerManager
Request evalreq : evalreq(MAT,QUA)
Reply evalOk : evalOk(_)
Reply evalKo : evalKo(_)
Dispatch update : update(MAT,QUA)
Dispatch exit : exit(_)

//messaggi wasteService
Request storeWaste : storeWaste(MATERIAL, TRUCKLOAD)
Dispatch doJob : doJob(_)

Reply pickupdone : pickupdone(_)
Reply dropoutdone : dropoutdone(_)



Context ctxwasteservice ip [host="localhost" port=8055]

QActor containermanager context ctxwasteservice{
	[#
		val boxMaxWeight = mutableMapOf<wasteservice.state.Material, Double>(wasteservice.state.Material.PLASTIC to 500.0, wasteservice.state.Material.GLASS to 500.0)
		val boxState  = wasteservice.state.WasteServiceState(boxMaxWeight)
	#]
	
	State init initial {
		println("$name	|	setup")
	}Goto idle
	
	State idle {
		
	}Transition t0 whenRequest evalreq -> evaluation
					whenMsg update -> update
					whenMsg exit -> end
	
	
	State evaluation {
		onMsg (evalreq : evalreq(MAT,QUA)){
			[#	try{
					requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
					requestWeightToStore = payloadArg(1).toDouble()		
				}catch(e : Exception){}
			#]
		}
			
		if [# boxState.canStore(requestMaterialToStore, requestWeightToStore)#]{
			replyTo evalreq with evalOk : evalOk(_)
		}
		else {
			replyTo evalreq with evalKo : evalKo(_)
		}
		
	}Goto idle
	
	State update {
		onMsg (update : update(MAT,QUA)){
			[#	
				try{
					requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
					requestWeightToStore = payloadArg(1).toDouble()	
					boxState.updateBoxWeight(requestMaterialToStore, requestWeightToStore)
						
				}
			#]
			[#
				catch(e : Exception){
					//Something
				}
			#]
		}
	}Goto idle
	
	State end {
		terminate 1
	}
}

QActor wasteservicehandler context ctxwasteservice{
	State init initial{
		
	}Goto idle
	
	State idle{
		
	}Transition t0 whenRequest storeWaste -> evalReq
					whenMsg exit -> end
	
	State evalReq{
		
	}Transition t0 whenReply evalOk -> acceptRequest
					whenReply evalKo -> rejectRequest
	
	State acceptRequest{
		
	}Goto idle
	
	State rejectRequest{
		
	}Goto idle
	
	State end{
		
	}
	
}

QActor wasteservicecore context ctxwasteservice{
	State init initial{
		
	}Goto idle
	
	State idle{
		
	}Transition t0 whenMsg doJob -> pickup
					whenReply dropoutdone -> backHome
					whenMsg exit -> end
					
	State backHome{
		
	}Goto idle
	
	State pickup{
		
	}Transition t0 whenReply dropoutdone -> clear
					whenReply pickupdone -> dropout
	
	State clear{
		
	}Transition t0 whenReply pickupdone -> dropout
	
	State dropout{
		
	}Goto idle
	
	State end{
		
	}
}