System wasteservice

//messaggi containerManager
Request evalreq : evalreq(MAT,QUA)
Reply evalOk : evalOk(_)
Reply evalKo : evalKo(_)
Dispatch update : update(MAT,QUA)
Dispatch exit : exit(_)

//messaggi wasteService
Request storeWaste : storeWaste(MATERIAL, TRUCKLOAD)
Reply loadaccept : loadaccept(_)
Reply loadrejected : loadrejected(_)
Dispatch doJob : doJob(MAT)

Request pickup : pickup(_)
Dispatch dropout : dropout(MAT)

Reply pickupdone : pickupdone(_)
Reply dropoutdone : dropoutdone(_)


Context ctxwasteservice ip [host="localhost" port=8055]
Context ctxtransporttrolley ip [host="127.0.0.1" port=8056]

QActor containermanager context ctxwasteservice{
	[#
		val boxMaxWeight = mutableMapOf<wasteservice.state.Material, Double>(wasteservice.state.Material.PLASTIC to 500.0, wasteservice.state.Material.GLASS to 500.0)
		val boxState  = wasteservice.state.WasteServiceState(boxMaxWeight)
	#]
	
	State init initial {
		println("$name	|	setup")
	}Goto idle
	
	State idle {
		
	}Transition t0 whenRequest evalreq -> evaluation
					whenMsg update -> update
					whenMsg exit -> end
	
	
	State evaluation {
		onMsg (evalreq : evalreq(MAT,QUA)){
			[#	try{
					requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
					requestWeightToStore = payloadArg(1).toDouble()		
				}catch(e : Exception){}
			#]
		}
			
		if [# boxState.canStore(requestMaterialToStore, requestWeightToStore)#]{
			replyTo evalreq with evalOk : evalOk(_)
		}
		else {
			replyTo evalreq with evalKo : evalKo(_)
		}
		
	}Goto idle
	
	State update {
		onMsg (update : update(MAT,QUA)){
			[#	
				try{
					requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
					requestWeightToStore = payloadArg(1).toDouble()	
					boxState.updateBoxWeight(requestMaterialToStore, requestWeightToStore)
						
				}
			#]
			[#
				catch(e : Exception){
					//Something
				}
			#]
		}
	}Goto idle
	
	State end {
		terminate 1
	}
}

ExternalQActor transportrolleycore context ctxtransporttrolley

QActor wasteservicehandler context ctxwasteservice{
	[#
		lateinit var REQMATERIAL : wasteservice.state.Material 
		var REQWEIGHT = 0.0
	#]
	State init initial{
		println("$name	|	setup")
	}Goto idle
	
	State idle{
		println("$name	|	in idle")
	}Transition t0 whenRequest storeWaste -> evalReq
					whenMsg exit -> end
	
	State evalReq{
		onMsg (storeWaste : storeWaste (MAT, QUA)){
		[#
			REQMATERIAL = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())
			REQWEIGHT = payloadArg(1).toDouble()
		#]
			request containermanager -m evalreq : evalreq($REQMATERIAL, $REQWEIGHT)
		}
	}Transition t0 whenReply evalOk -> acceptRequest
					whenReply evalKo -> rejectRequest
	
	State acceptRequest{
		replyTo storeWaste with loadaccept : loadaccept(_)
		forward wasteservicecore -m doJob: doJob($REQMATERIAL, $REQWEIGHT)		
	}Goto idle
	
	State rejectRequest{
		replyTo storeWaste with loadrejected : loadrejected(_)
	}Goto idle
	
	State end{
		terminate 1
	}
	
}

 

QActor wasteservicecore context ctxwasteservice{
	[#
		lateinit var REQMATERIAL : wasteservice.state.Material 
	#]
	State init initial{
		println("$name 	| 	setup")
	}Goto idle
	
	State idle{
		println("$name 	| 	in idle")
	}Transition t0 whenMsg doJob -> pickup
					whenReply dropoutdone -> backHome
					whenMsg exit -> end
					
	State backHome{
		
	}Goto idle
	
	State pickup{
		onMsg(doJob : doJob(MAT)){
		[#
			try{
			REQMATERIAL = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())
			}catch{}
		#]
		}
		request transportrolleycore -m pickup : pickup(_)
	}Transition t0 whenReply dropoutdone -> clear
					whenReply pickupdone -> dropout
	
	State clear{
		
	}Transition t0 whenReply pickupdone -> dropout
	
	State dropout{
		forward transportrolleycore -m dropout : dropout($REQMATERIAL)
	}Goto idle
	
	State end{
		terminate 1
	}
}