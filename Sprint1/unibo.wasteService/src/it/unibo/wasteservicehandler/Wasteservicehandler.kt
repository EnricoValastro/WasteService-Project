/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservicehandler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservicehandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				lateinit var REQMATERIAL : wasteservice.state.Material 
				var REQWEIGHT : Double = 0.0
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name	|	starting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name	|	waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="evalReq",cond=whenRequest("storewaste"))
					transition(edgeName="t04",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("evalReq") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storewaste(MAT,QUA)"), Term.createTerm("storewaste(MAT,QUA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											REQMATERIAL = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())
											REQWEIGHT = payloadArg(1).toDouble()
								request("evalreq", "evalreq($REQMATERIAL,$REQWEIGHT)" ,"containermanager" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="acceptRequest",cond=whenReply("evalok"))
					transition(edgeName="t06",targetState="rejectRequest",cond=whenReply("evalko"))
				}	 
				state("acceptRequest") { //this:State
					action { //it:State
						println("$name	|	request accepted")
						forward("update", "update($REQMATERIAL,$REQWEIGHT)" ,"containermanager" ) 
						answer("storewaste", "loadaccept", "loadaccept(_)"   )  
						forward("dojob", "dojob($REQMATERIAL)" ,"wasteservicecore" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("rejectRequest") { //this:State
					action { //it:State
						println("$name	|	request rejected")
						answer("storewaste", "loadrejected", "loadrejected(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						terminate(1)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
