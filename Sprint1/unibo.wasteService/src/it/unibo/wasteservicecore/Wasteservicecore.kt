/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservicecore

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservicecore ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				lateinit var REQMATERIAL : wasteservice.state.Material 
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						
									utility.Banner.printBannerWasteService()
						println("$name 	| 	starting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("$name 	| 	waiting...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="pickup",cond=whenDispatch("dojob"))
					transition(edgeName="t08",targetState="backHome",cond=whenEvent("dropoutdone"))
					transition(edgeName="t09",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("pickup") { //this:State
					action { //it:State
						println("$name 	| 	asking for pickup...")
						if( checkMsgContent( Term.createTerm("dojob(MAT)"), Term.createTerm("dojob(MAT)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											try{
											REQMATERIAL = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())
											}catch(e : Exception){}
						}
						request("pickup", "pickup(_)" ,"transporttrolleycore" )  
						println("$name 	| 	waiting for pickup done...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="dropout",cond=whenReply("pickupdone"))
				}	 
				state("dropout") { //this:State
					action { //it:State
						println("$name 	| 	asking for dropout")
						forward("dropout", "dropout($REQMATERIAL)" ,"transporttrolleycore" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("backHome") { //this:State
					action { //it:State
						println("$name 	| 	sending robot to home")
						forward("gotohome", "gotohome(_)" ,"transporttrolleycore" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						forward("exit", "exit(_)" ,"wasteservicehandler" ) 
						forward("exit", "exit(_)" ,"containermanager" ) 
						terminate(1)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
