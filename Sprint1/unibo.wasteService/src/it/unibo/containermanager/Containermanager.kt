/* Generated by AN DISI Unibo */ 
package it.unibo.containermanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Containermanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val boxMaxWeight = mutableMapOf<wasteservice.state.Material, Double>(wasteservice.state.Material.PLASTIC to 500.0, wasteservice.state.Material.GLASS to 500.0)
				val boxState  = wasteservice.state.WasteServiceState(boxMaxWeight)
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						println("$name	|	setup")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="evaluation",cond=whenRequest("evalreq"))
					transition(edgeName="t01",targetState="update",cond=whenDispatch("update"))
					transition(edgeName="t02",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("evaluation") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("evalreq(MAT,QUA)"), Term.createTerm("evalreq(MAT,QUA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									try{
													requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
													requestWeightToStore = payloadArg(1).toDouble()		
												}catch(e : Exception){}
						}
						if(  boxState.canStore(requestMaterialToStore, requestWeightToStore) 
						 ){answer("evalreq", "evalOk", "evalOk(_)"   )  
						}
						else
						 {answer("evalreq", "evalKo", "evalKo(_)"   )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("update") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("update(MAT,QUA)"), Term.createTerm("update(MAT,QUA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
													requestWeightToStore = payloadArg(1).toDouble()	
													boxState.updateBoxWeight(requestMaterialToStore, requestWeightToStore)
														
												}
								
												catch(e : Exception){
													//Something
												}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						terminate(1)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
