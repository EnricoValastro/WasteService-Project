/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val containerState = wasteservice.state.ContainerState()
				lateinit var REQMATERIAL : wasteservice.state.Material
				var REQWEIGHT : Double = 0.0
				var eval : Boolean = true
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						
									utility.Banner.printBannerWasteService()
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.CYAN) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.CYAN) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="evalReq",cond=whenRequest("storewaste"))
					transition(edgeName="t01",targetState="backHome",cond=whenEvent("local_dropoutdone"))
					transition(edgeName="t02",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("evalReq") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("storewaste(MAT,QUA)"), Term.createTerm("storewaste(MAT,QUA)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											try{
												REQMATERIAL = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())
												REQWEIGHT = payloadArg(1).toDouble()	
											}catch(e : Exception){		
											}
											eval = containerState.canStore(REQMATERIAL, REQWEIGHT)
											
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="acceptRequest", cond=doswitchGuarded({ eval == true  
					}) )
					transition( edgeName="goto",targetState="rejectRequest", cond=doswitchGuarded({! ( eval == true  
					) }) )
				}	 
				state("rejectRequest") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	request rejected", unibo.comm22.utils.ColorsOut.CYAN) 
						answer("storewaste", "loadrejected", "loadrejected(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("acceptRequest") { //this:State
					action { //it:State
						 
									unibo.comm22.utils.ColorsOut.outappl("$name	|	request accepted", unibo.comm22.utils.ColorsOut.CYAN)
									containerState.updateBoxWeight(REQMATERIAL, REQWEIGHT)
						forward("updatecontainer", "updatecontainer($REQMATERIAL,$REQWEIGHT)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pickup", cond=doswitch() )
				}	 
				state("pickup") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	pickingup...", unibo.comm22.utils.ColorsOut.CYAN) 
						request("pickup", "pickup(_)" ,"transporttrolleycore" )  
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting for pickup done...", unibo.comm22.utils.ColorsOut.CYAN) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t03",targetState="dropout",cond=whenReply("pickupdone"))
				}	 
				state("dropout") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	droppingout", unibo.comm22.utils.ColorsOut.CYAN) 
						answer("storewaste", "loadaccept", "loadaccept"   )  
						forward("dropout", "dropout($REQMATERIAL)" ,"transporttrolleycore" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("backHome") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	sending robot to home", unibo.comm22.utils.ColorsOut.CYAN) 
						forward("gotohome", "gotohome(_)" ,"transporttrolleycore" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("end") { //this:State
					action { //it:State
						forward("exit", "exit(_)" ,"systemstatemanager" ) 
						terminate(0)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
