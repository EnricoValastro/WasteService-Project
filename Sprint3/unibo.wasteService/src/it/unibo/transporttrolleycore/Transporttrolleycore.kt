/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolleycore

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolleycore ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				lateinit var MaterialToStore : String
				lateinit var POS 			 : String
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.BLUE) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.BLUE) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="pickupMove",cond=whenRequest("pickup"))
					transition(edgeName="t05",targetState="dropoutMove",cond=whenDispatch("dropout"))
					transition(edgeName="t06",targetState="backHome",cond=whenDispatch("gotohome"))
					transition(edgeName="t07",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("pickupMove") { //this:State
					action { //it:State
						request("moveto", "moveto(INDOOR)" ,"transporttrolleymover" )  
						forward("blink", "blink(_)" ,"led" ) 
						forward("updateled", "updateled(BLINKING)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,MOVING)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="pickupExec",cond=whenReply("moveok"))
					transition(edgeName="t09",targetState="stopPickup",cond=whenDispatch("trolleystop"))
					transition(edgeName="t010",targetState="moveErr",cond=whenReply("moveko"))
				}	 
				state("stopPickup") { //this:State
					action { //it:State
						forward("turnon", "turnon(_)" ,"led" ) 
						forward("updateled", "updateled(ON)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,STOPPED)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="resumePickup",cond=whenDispatch("trolleyresume"))
				}	 
				state("resumePickup") { //this:State
					action { //it:State
						forward("blink", "blink(_)" ,"led" ) 
						forward("updateled", "updateled(BLINKING)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,MOVING)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="pickupExec",cond=whenReply("moveok"))
					transition(edgeName="t013",targetState="stopPickup",cond=whenDispatch("trolleystop"))
					transition(edgeName="t014",targetState="moveErr",cond=whenReply("moveko"))
				}	 
				state("pickupExec") { //this:State
					action { //it:State
						request("execaction", "execaction(PICKUP)" ,"transporttrolleyexecutor" )  
						forward("turnon", "turnon(_)" ,"led" ) 
						forward("updateled", "updateled(ON)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(INDOOR,PICKINGUP)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="pickupRes",cond=whenReply("execok"))
					transition(edgeName="t016",targetState="execErr",cond=whenReply("execko"))
				}	 
				state("pickupRes") { //this:State
					action { //it:State
						forward("updatetrolley", "updatetrolley(INDOOR,IDLE)" ,"systemstatemanager" ) 
						answer("pickup", "pickupdone", "pickupdone(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("dropoutMove") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dropout(MATERIAL)"), Term.createTerm("dropout(MATERIAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									
												try{
													MaterialToStore = payloadArg(0).trim().uppercase()
													if(MaterialToStore.equals("PLASTIC")){
														POS = "PLASTICBOX"
													}
													else{
														POS = "GLASSBOX"
													}
												}catch(e : Exception){}	
						}
						request("moveto", "moveto($POS)" ,"transporttrolleymover" )  
						forward("blink", "blink(_)" ,"led" ) 
						forward("updateled", "updateled(BLINKING)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,MOVING)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t017",targetState="dropoutExec",cond=whenReply("moveok"))
					transition(edgeName="t018",targetState="stopDropout",cond=whenDispatch("trolleystop"))
					transition(edgeName="t019",targetState="moveErr",cond=whenReply("moveko"))
				}	 
				state("stopDropout") { //this:State
					action { //it:State
						forward("turnon", "turnon(_)" ,"led" ) 
						forward("updateled", "updateled(ON)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,STOPPED)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t020",targetState="resumeDropout",cond=whenDispatch("trolleyresume"))
				}	 
				state("resumeDropout") { //this:State
					action { //it:State
						forward("blink", "blink(_)" ,"led" ) 
						forward("updateled", "updateled(BLINKING)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,MOVING)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="dropoutExec",cond=whenReply("moveok"))
					transition(edgeName="t022",targetState="stopPickup",cond=whenDispatch("trolleystop"))
					transition(edgeName="t023",targetState="moveErr",cond=whenReply("moveko"))
				}	 
				state("dropoutExec") { //this:State
					action { //it:State
						request("execaction", "execaction(DROPOUT)" ,"transporttrolleyexecutor" )  
						forward("turnon", "turnon(_)" ,"led" ) 
						forward("updateled", "updateled(ON)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley($POS,DROPPINGOUT)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t024",targetState="dropoutRes",cond=whenReply("execok"))
					transition(edgeName="t025",targetState="execErr",cond=whenReply("execko"))
				}	 
				state("dropoutRes") { //this:State
					action { //it:State
						emit("local_dropoutdone", "local_dropoutdone" ) 
						forward("updatetrolley", "updatetrolley($POS,IDLE)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("backHome") { //this:State
					action { //it:State
						request("moveto", "moveto(HOME)" ,"transporttrolleymover" )  
						forward("blink", "blink(_)" ,"led" ) 
						forward("updateled", "updateled(BLINKING)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(ONTHEROAD,MOVING)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t026",targetState="backHomeRes",cond=whenReply("moveok"))
					transition(edgeName="t027",targetState="moveErr",cond=whenReply("moveko"))
				}	 
				state("backHomeRes") { //this:State
					action { //it:State
						forward("turnoff", "turnoff(_)" ,"led" ) 
						forward("updateled", "updateled(OFF)" ,"systemstatemanager" ) 
						forward("updatetrolley", "updatetrolley(HOME,IDLE)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("moveErr") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	something went wrong...assistance required.", unibo.comm22.utils.ColorsOut.BLUE) 
						forward("exit", "exit(_)" ,"wasteservice" ) 
						forward("exit", "exit(_)" ,"transporttrolleycore" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("execErr") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("end") { //this:State
					action { //it:State
						forward("exit", "exit(_)" ,"transporttrolleyexecutor" ) 
						forward("exit", "exit(_)" ,"transporttrolleymover" ) 
						terminate(0)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
