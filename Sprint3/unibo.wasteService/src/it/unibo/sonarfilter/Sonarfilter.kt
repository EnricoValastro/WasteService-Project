/* Generated by AN DISI Unibo */ 
package it.unibo.sonarfilter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarfilter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "init"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val DLIMIT = utility.SonarFilterConfig.configSonarFromFile()
				var stopFlag = false
				var distance : Int = 0
		return { //this:ActionBasciFsm
				state("init") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.YELLOW) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.YELLOW) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t050",targetState="handleSonarData",cond=whenEvent("sonardata"))
				}	 
				state("handleSonarData") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												try{
													distance = payloadArg(0).toInt()
												}catch(e : Exception){ 
													unibo.comm22.utils.ColorsOut.outappl("$name	|	some err...", unibo.comm22.utils.ColorsOut.YELLOW)
												}	
						}
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	received $distance...", unibo.comm22.utils.ColorsOut.YELLOW) 
						if(  distance <= DLIMIT  
						 ){if(  !stopFlag  
						 ){ unibo.comm22.utils.ColorsOut.outappl("$name	|	alarm...", unibo.comm22.utils.ColorsOut.YELLOW) 
						emit("alarm", "alarm(STOP)" ) 
						 stopFlag = true  
						}
						}
						else
						 {if(  stopFlag  
						  ){ unibo.comm22.utils.ColorsOut.outappl("$name	|	resume...", unibo.comm22.utils.ColorsOut.YELLOW) 
						 emit("local_resume", "local_resume(RESUME)" ) 
						  stopFlag = false  
						 }
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t051",targetState="handleSonarData",cond=whenEvent("sonardata"))
					transition(edgeName="t052",targetState="end",cond=whenDispatch("exit"))
				}	 
				state("end") { //this:State
					action { //it:State
						 unibo.comm22.utils.ColorsOut.outappl("$name	|	bye", unibo.comm22.utils.ColorsOut.YELLOW)  
						terminate(0)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
