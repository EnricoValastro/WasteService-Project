/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var led : `it.unibo`.radarSystem22.domain.interfaces.ILed? = null
				var flagBlink = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="blinkon",cond=whenDispatch("blink"))
					transition(edgeName="t01",targetState="on",cond=whenDispatch("turnon"))
					transition(edgeName="t02",targetState="off",cond=whenDispatch("turnoff"))
				}	 
				state("on") { //this:State
					action { //it:State
						led.turnOn() 
						 flagBlink = false  
						forward("updateled", "updateled(ON)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("off") { //this:State
					action { //it:State
						led.turnOff() 
						 flagBlink = false  
						forward("updateled", "updateled(OFF)" ,"systemstatemanager" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("blinkon") { //this:State
					action { //it:State
						if(  flagBlink == false 
						 ){forward("updateled", "updateled(BLINK)" ,"systemstatemanager" ) 
						 flagBlink = true  
						}
						led.turnOn() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_blinkon", 
				 	 			scope, context!!, "local_tout_led_blinkon", 250.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t03",targetState="blinkoff",cond=whenTimeout("local_tout_led_blinkon"))   
					transition(edgeName="t04",targetState="on",cond=whenDispatch("turnon"))
					transition(edgeName="t05",targetState="off",cond=whenDispatch("turnoff"))
				}	 
				state("blinkoff") { //this:State
					action { //it:State
						led.turnOff() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		//sysaction { //it:State
				 	 		  stateTimer = TimerActor("timer_blinkoff", 
				 	 			scope, context!!, "local_tout_led_blinkoff", 250.toLong() )
				 	 		//}
					}	 	 
					 transition(edgeName="t06",targetState="blinkon",cond=whenTimeout("local_tout_led_blinkoff"))   
					transition(edgeName="t07",targetState="on",cond=whenDispatch("turnon"))
					transition(edgeName="t08",targetState="off",cond=whenDispatch("turnoff"))
				}	 
			}
		}
}
