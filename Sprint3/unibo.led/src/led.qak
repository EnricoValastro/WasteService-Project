System raspberry

Dispatch blink : blink(_)
Dispatch turnon : turnon(_)
Dispatch turnoff : turnoff(_)

Dispatch updateled : updateled(STATE)

Dispatch sonaractivate : info(ARG)
Dispatch sonardeactivate : info(ARG)


Context ctxwasteservice ip[host="127.0.0.1" port=8055]
Context ctxpi ip [host="localhost" port=8065 ] 

//CodedQActor sonarsimulator  context ctxpi className "sonarSimulator"  
//CodedQActor sonardatasource context ctxpi className "sonarHCSR04Support2021"

ExternalQActor systemstatemanager context ctxwasteservice

QActor led context ctxpi {
	[# 
		var led : `it.unibo`.radarSystem22.domain.interfaces.ILed? = null
		var flagBlink = false
	#]
	State s0 initial{
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	starting...", unibo.comm22.utils.ColorsOut.YELLOW)#]
		[#
			led = utility.LedFactory.createLed()
			led!!.turnOff()
		#]
		
	}Goto idle
	
			
	State idle {
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	waiting...", unibo.comm22.utils.ColorsOut.YELLOW)#]
	}Transition t0 whenMsg blink -> blinkon
					whenMsg turnon -> on
					whenMsg turnoff -> off
	State on {
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	TurnOn Led", unibo.comm22.utils.ColorsOut.YELLOW)#]
		[#led!!.turnOn()#]
		[# flagBlink = false #]
	}Goto idle
	
	State off {
		[# unibo.comm22.utils.ColorsOut.outappl("$name	|	TurnOff Led", unibo.comm22.utils.ColorsOut.YELLOW)#]
		[#led!!.turnOff()#]
		[# flagBlink = false #]
	}Goto idle
	
	State blinkon {
		if[# flagBlink == false#]{
			[# unibo.comm22.utils.ColorsOut.outappl("$name	|	Blink Led", unibo.comm22.utils.ColorsOut.YELLOW)#]
			[# flagBlink = true #]
		}
		[#led!!.turnOn()#]
	}Transition t0 whenTime 300 -> blinkoff
					whenMsg turnon -> on
					whenMsg turnoff -> off
	
	State blinkoff {
		[#led!!.turnOff()#]
	}Transition t0 whenTime 300 -> blinkon
					whenMsg turnon -> on
					whenMsg turnoff -> off
}

/* 
QActor sonar context ctxpi{
	[#
		val simulate = true
		val sonarActorName = "sonar"	
	#]
	State s0 initial {
		run sonarConfig.configureTheSonar(simulate, sonarActorName)
		
	}
	
	State activateSonar {
		printCurrentMessage
		if[# 'it.unibo'.radarSystem22.domani.utils.DomainSystemConfig.simulation#]{
			forward sonarsimulator -m sonaractivate :info(ARG)
			
		}else{
			forward sonardatasource -m sonaractivate : info(ARG)
		}
	}
	
	
	State deactivateSonar{
		printCurrentMessage
	}Goto end
	
	
	State end{
		println("sonar BYE")
		[#System.exit(0)#]
	}
}
*/