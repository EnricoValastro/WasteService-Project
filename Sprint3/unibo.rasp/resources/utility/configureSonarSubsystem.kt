package utility

import DistanceObserver
import it.unibo.kactor.ActorBasic
import it.unibo.kactor.sysUtil
import it.unibo.radarSystem22.domain.interfaces.ISonarForObs
import it.unibo.radarSystem22.domain.utils.DomainSystemConfig
import org.json.JSONObject
import java.io.File
import java.nio.charset.StandardCharsets

lateinit var firstActorInPipe : ActorBasic
lateinit var Sonar : ISonarForObs

fun createThePipe(sonarActorName : String){
    firstActorInPipe           = sysUtil.getActor("sonardatasource")!!
    firstActorInPipe.
    subscribeLocalActor("datacleaner"). 	//removes 'wrong' data''
            //subscribeLocalActor("datalogger").		    //logs (shows) the data generated by the sonar
            //subscribeLocalActor("sonar").				    //handles sonarrobot but does not propagate ...
            //subscribeLocalActor("distancefilter").		//propagates the lcoal stream event obstacle
    subscribeLocalActor(sonarActorName)
}

fun configureTheSonar( sonarActorName : String = "sonar"){
    configTheSystem()
    createThePipe(sonarActorName)
}

fun configTheSystem(){

    var config = File("DomainSystemConfig.json").readText(StandardCharsets.UTF_8)
    var jsonObj = JSONObject(config)

    DomainSystemConfig.simulation       = jsonObj.getBoolean("SIMULATION")
    DomainSystemConfig.testing          = jsonObj.getBoolean("TESTING")

    DomainSystemConfig.sonarType        = jsonObj.getString("SONARTYPE")
    DomainSystemConfig.sonarDelay       = jsonObj.getInt("SONARDELAY")
    DomainSystemConfig.sonarDistanceMax = jsonObj.getInt("SONARDISTANCEMAX")
    DomainSystemConfig.sonarObservable  = jsonObj.getBoolean("SONAROBSERVABLE")
    DomainSystemConfig.testingDistance  = jsonObj.getInt("TESTINGDISTANCE")
    println(DomainSystemConfig.simulation)
}

