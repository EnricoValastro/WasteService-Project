System wasteservice

Request storeWaste : storeWaste(MATERIAL, TRUCKLOAD)
Reply loadaccept : loadaccept(_)
Reply loadrejected : loadrejected(_)

Request pickup : pickup(_)
Request dropout : dropout(MAT)
Reply pickupdone : pickupdone(_)
Reply dropoutdone : dropoutdone(_)

/*
 	Dispatch backhome : backhome(_)
	Dispatch gotohome : gotohome(_) 
 */

Context ctxwasteservice ip [host="localhost" port=8055]

QActor wasteservice context ctxwasteservice {
		
	[#
		val boxMaxWeight = mutableMapOf<wasteservice.state.Material, Double>(wasteservice.state.Material.PLASTIC to 500.0, wasteservice.state.Material.GLASS to 500.0)
		val boxState  = wasteservice.state.WasteServiceState(boxMaxWeight)
		lateinit var requestMaterialToStore : wasteservice.state.Material 
		var requestWeightToStore = 0.0
	#]
	
	State s0 initial{
		println("$name	|	setup")
	}Goto idle
	
	State idle{
		println("$name	|	in idle ")
		updateResource[#boxState.toJsonString()#]
	}Transition t0 whenRequest storeWaste -> requestEvaluation
					 		
	
	State requestEvaluation{
		onMsg(storeWaste : storeWaste(MAT, QUA)){
			[#	
				try{
					requestMaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase())  
					requestWeightToStore = payloadArg(1).toDouble()		
				}catch(e : Exception){
			#]
					replyTo storeWaste with loadrejected : loadrejected(_)
			[#
				}	
			#]	
		}
	}Goto acceptRequest if[# boxState.canStore(requestMaterialToStore, requestWeightToStore) #]
					else rejectRequest
				
	State rejectRequest{
		replyTo storeWaste with loadrejected : loadrejected(_)
	}Goto idle
	
	State acceptRequest{
		request transporttrolley -m pickup : pickup
	}Transition t0 whenReply pickupdone -> dropout
													
	State dropout{
		[# boxState.updateBoxWeight(requestMaterialToStore, requestWeightToStore) #]				
		replyTo storeWaste with loadaccept : loadaccept(_)
		[#var TYPE = requestMaterialToStore.toString()#]
		request transporttrolley -m dropout : dropout(TYPE)
	}Transition t0 whenReply dropoutdone -> idle
										
}

QActor transporttrolley context ctxwasteservice{
	
	[#
		val tTstate = transporttrolley.state.TransportTrolleyState(transporttrolley.state.CurrStateTrolley.IDLE)
		lateinit var MaterialToStore : wasteservice.state.Material 
	#]
	
	State s0 initial{
		println("$name	|	setup")
		
	}Goto idle
	
	State idle{
		updateResource[#tTstate.toJsonString()#]
	}Transition t0 whenRequest pickup -> pickingup
					 
	
	State pickingup{
		[#
			tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.PICKINGUP)
		#]
		updateResource[#tTstate.toJsonString()#]
		replyTo pickup with pickupdone : pickupdone(_)
	}Transition t0 whenRequest dropout -> droppingout
	
	State droppingout{
		
		onMsg(dropout : dropout(MAT)){
			[# MaterialToStore = wasteservice.state.Material.valueOf(payloadArg(0).trim().uppercase()) #]
		}
		[# tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.DROPPINGOUT) #]
		updateResource[#tTstate.toJsonString()#]
		replyTo dropout with dropoutdone : dropoutdone(_)
		
	}Goto idle
					 
}
