/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						forward("turnOn", "turnOn" ,"led" ) 
						forward("turnOff", "turnOff" ,"led" ) 
						forward("blink", "blink" ,"led" ) 
						forward("cmd", "cmd" ,"basicrobot" ) 
						request("step", "step(w)" ,"basicrobot" )  
						answer("pickup", "pickupdone", "pickupdone(_)"   )  
						answer("droppout", "dropoutdone", "dropoutdone(_)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
}
