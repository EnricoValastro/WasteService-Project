/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val tTstate = transporttrolley.state.TransportTrolleyState(transporttrolley.state.CurrStateTrolley.IDLE)
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name | setup")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						updateResourceRep(tTstate.toJsonString() 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="pickup",cond=whenDispatch("pickingup"))
				}	 
				state("pickup") { //this:State
					action { //it:State
						
									tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.PICKINGUP)
						updateResourceRep(tTstate.toJsonString() 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="dropout",cond=whenDispatch("droppingout"))
				}	 
				state("dropout") { //this:State
					action { //it:State
						
									tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.DROPPINGOUT)
						updateResourceRep(tTstate.toJsonString() 
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="backhome",cond=whenDispatch("backhome"))
					transition(edgeName="t03",targetState="pickup",cond=whenDispatch("pickingup"))
				}	 
				state("backhome") { //this:State
					action { //it:State
						
									tTstate.updateTTState(transporttrolley.state.CurrStateTrolley.IDLE)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
}
