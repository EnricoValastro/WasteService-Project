/* Generated by AN DISI Unibo */ 
package it.unibo.ledqakactor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Ledqakactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "setup"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			var newState = ws.LedState.OFF	 
		return { //this:ActionBasciFsm
				state("setup") { //this:State
					action { //it:State
						println("$name | setup")
					}
				}	 
				state("on") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("led on")
					}
					 transition(edgeName="t00",targetState="off",cond=whenEvent("update_led"))
				}	 
				state("off") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("led off")
					}
					 transition(edgeName="t01",targetState="on",cond=whenEvent("update_led"))
				}	 
				state("blink") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("led blinking")
					}
					 transition(edgeName="t02",targetState="blink",cond=whenEvent("update_led"))
				}	 
			}
		}
}
